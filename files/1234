#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <stdbool.h>
#include <time.h>
#include <windows.h>
/*#include <unistd.h>
#define Sleep(ms) sleep(ms/1000)
#define \
    system(cmd) \
    ({ \
        char *terminal=NULL; \
        sprintf(terminal, "gedit %s",cmd); \
        system(terminal); \
    })
*/

int nResources=0, nProcesses=0;
int *resources;
int **allocated;
int **maxRequired;
int **need;
int *safeSeq;
int nProcessRan = 0;
FILE* fp=NULL;
pthread_mutex_t lockResources;
pthread_cond_t condition;

void input();
int error();
void Exit();
bool getSafeSeq();
void* processCode(void *);

int main() {
    srand(time(NULL));
    input();

	// get safe sequence
	safeSeq = (int *)malloc(nProcesses * sizeof(*safeSeq));
        for(int i=0; i<nProcesses; i++) safeSeq[i] = -1;

    if(!getSafeSeq()) {
        printf("\nUnsafe State! The processes leads the system to a unsafe state.\nMay lead to deadlock.\n\n");
        exit(-1);
    }

    printf("\n No deadlock! Safe Sequence Found : ");
    for(int i=0; i<nProcesses; i++) {
        printf(" %d ", safeSeq[i]+1);
    }

    printf("\nExecuting Processes...");
    Sleep(1000); printf("\n\n");

	// run threads
	pthread_t processes[nProcesses];
    pthread_attr_t attr;
    pthread_attr_init(&attr);

	int processNumber[nProcesses];
	for(int i=0; i<nProcesses; i++) processNumber[i] = i;

    for(int i=0; i<nProcesses; i++)
        pthread_create(&processes[i], &attr, processCode, (void *)(&processNumber[i]));

    for(int i=0; i<nProcesses; i++)
        pthread_join(processes[i], NULL);

    printf("\nAll Processes Finished\n");
    Exit();
}

void input()
{
    fp=fopen("Data.dat","r+");

    if(!fscanf(fp,"%d", &nProcesses)) error();
    if(nProcesses==0){
        printf("\nNo process to execute...\n\n");
        Exit();
        exit(0);
    }
    if(nProcesses<0) error();

    if(!fscanf(fp,"%d", &nResources)) error();
    if(nResources<0) error();

    resources = (int *)calloc(nResources, sizeof(*resources));
    for(int i=0; i<nResources; i++){
        if(!fscanf(fp,"%d", &resources[i])) error();
        if(resources[i]<0) error();
    }

    allocated = (int **)calloc(nProcesses, sizeof(*allocated));
    for(int i=0; i<nProcesses; i++)
        allocated[i] = (int *)calloc(nResources, sizeof(**allocated));

    maxRequired = (int **)calloc(nProcesses, sizeof(*maxRequired));
    for(int i=0; i<nProcesses; i++)
        maxRequired[i] = (int *)calloc(nResources, sizeof(**maxRequired));

    need = (int **)calloc(nProcesses, sizeof(*need));
    for(int i=0; i<nProcesses; i++)
        need[i] = (int *)calloc(nResources, sizeof(**need));

    for(int i=0; i<nProcesses; i++) {
        for(int j=0; j<nResources; j++){     //allocated
            if(!fscanf(fp,"%d", &allocated[i][j])) error();
            if(allocated[i][j]<0) error();
        }
        for(int j=0; j<nResources; j++){     //maximum required resources
            if(!fscanf(fp,"%d", &maxRequired[i][j])) error();
            if(maxRequired[i][j]<0) error();
        }
        for(int j=0; j<nResources; j++)     //calculate need matrix
            need[i][j] = maxRequired[i][j] - allocated[i][j];
    }
}

void Exit()
{
    fclose(fp);
    free(resources);
    for(int i=0; i<nProcesses; i++) {
        free(allocated[i]);
        free(maxRequired[i]);
		free(need[i]);
    }
    free(allocated);
    free(maxRequired);
	free(need);
    free(safeSeq);
}

int error()
{
    printf("\nWrong input.");
    Exit();
    system("Data.dat");
    return main();
}

bool getSafeSeq() {
    int tempRes[nResources];
    for(int i=0; i<nResources; i++) tempRes[i] = resources[i];

    bool finished[nProcesses];
    for(int i=0; i<nProcesses; i++) finished[i] = false;
    int nfinished=0;
    while(nfinished < nProcesses) {
        bool safe = false;

        for(int i=0; i<nProcesses; i++) {
            if(!finished[i]) {
                bool possible = true;

                for(int j=0; j<nResources; j++)
                    if(need[i][j] > tempRes[j]) {
                        possible = false;
                        break;
                    }

                if(possible) {
                    for(int j=0; j<nResources; j++)
                        tempRes[j] += allocated[i][j];
                    safeSeq[nfinished] = i;
                    finished[i] = true;
                    ++nfinished;
                    safe = true;
                }
            }
        }

        if(!safe) {
            for(int k=0; k<nProcesses; k++) safeSeq[k] = -1;
                return false; // no safe sequence found
            }
    }
    return true; // safe sequence found
}

// process code
void* processCode(void *arg) {
    int p = *((int *) arg);

	// lock resources
    pthread_mutex_lock(&lockResources);

    // condition check
    while(p != safeSeq[nProcessRan])
        pthread_cond_wait(&condition, &lockResources);

	// process
    printf("\n--> Process %d", p+1);
    printf("\n\tAllocated : ");
    for(int i=0; i<nResources; i++)
        printf(" %d ", allocated[p][i]);

    printf("\n\tNeeded    : ");
    for(int i=0; i<nResources; i++)
        printf(" %d ", need[p][i]);

    printf("\n\tAvailable : ");
    for(int i=0; i<nResources; i++)
        printf(" %d ", resources[i]);

    Sleep(1000); printf("\n");

    printf("\tResource Allocated!");
    Sleep(1000); printf("\n");
    printf("\tProcess Code Running...");
    Sleep((rand()%3 + 2)*1000); printf("\n"); // process code
    printf("\tProcess Code Completed...");
    Sleep(1000); printf("\n");
    printf("\tProcess Releasing Resource...");
    Sleep(1000); printf("\n");
    printf("\tResource Released!");

	for(int i=0; i<nResources; i++)
        resources[i] += allocated[p][i];

    printf("\n\tNow Available : ");
    for(int i=0; i<nResources; i++)
        printf(" %d ", resources[i]);

    Sleep(1000); printf("\n\n");

	// condition broadcast
    nProcessRan++;
    pthread_cond_broadcast(&condition);
    pthread_mutex_unlock(&lockResources);
	pthread_exit(NULL);
}
